#!/usr/bin/env bash

set -e            # fail fast
set -o pipefail   # don't ignore exit codes when piping output

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BP_DIR=$(cd $(dirname $0); cd ..; pwd)

source $BP_DIR/bin/common.sh
trap cat_cpanm_build_log ERR
mkdir -p $BUILD_DIR/.profile.d

export_env_dir $ENV_DIR '^BUILDPACK_' ''
if [ -e "$BUILD_DIR/.perl-version" ]; then
    PERL_VERSION=`cat "$BUILD_DIR/.perl-version"`
fi
PERL_VERSION=${PERL_VERSION-'5.18.2'}
PERL_VERSION=${BUILDPACK_PERL_VERSION-$PERL_VERSION}
PERL_LIBS=${BUILDPACK_PERL_LIBS-'extras'}
PERL_URL=${BUILDPACK_PERL_URL:-'https://heroku-buildpack-perl.s3.amazonaws.com'}
CPANM_URL=${BUILDPACK_CPANM_URL:-"$PERL_URL/cpanm"}
CPANM_OPT=${BUILDPACK_CPANM_OPT-"--quiet --notest"}
if [ -n "$BUILDPACK_CPAN_MIRROR" ]; then
  status "Using CPAN mirror $BUILDPACK_CPAN_MIRROR"
  CPANM_OPT="$CPANM_OPT --mirror-only --mirror '$BUILDPACK_CPAN_MIRROR'"
fi
export PERL_CPANM_OPT=$CPANM_OPT

if [ -n "$PERL_VERSION" ] && [ "$PERL_VERSION" != "system" ]; then
    PERL_PACKAGE="$PERL_URL/perl-$PERL_VERSION.tgz"
    status "Vendoring $PERL_PACKAGE"
    mkdir -p "$BUILD_DIR/vendor/perl"
    curl -sL $PERL_PACKAGE | tar xzf - -C "$BUILD_DIR/vendor/perl" &> /dev/null
    export PATH="$BUILD_DIR/vendor/perl/bin:$PATH"
    echo "export PATH=\"\$HOME/vendor/perl/bin:\$PATH\";" > $BUILD_DIR/.profile.d/buildpack_vendor_perl.sh
    for package in $PERL_LIBS; do
        PERL_PACKAGE="$PERL_URL/perl-$PERL_VERSION-$package.tgz"
        status "Vendoring $PERL_PACKAGE"
        curl -sL $PERL_PACKAGE | tar xzf - -C "$BUILD_DIR/vendor/perl" &> /dev/null
    done
fi

CURRENT_PERL_VERSION=$( eval $(perl -V:PERL_.*:); echo "$PERL_REVISION.$PERL_VERSION.$PERL_SUBVERSION" )
status "Current perl version is $CURRENT_PERL_VERSION"

cd $BUILD_DIR

source $BP_DIR/bin/steps/hooks/pre_compile $ENV_DIR

if [ -d "$CACHE_DIR/perl/local" ]; then
  if [ -f "$CACHE_DIR/perl/.perl-version" ] && [ $(cat $CACHE_DIR/perl/.perl-version) != "$CURRENT_PERL_VERSION" ]; then
    status "Perl version changed, not restoring local directory from cache"
  else
    status "Restoring local directory from cache"
    cp -R "$CACHE_DIR/perl/local" . &> /dev/null || true
  fi
fi

if [ -e "$ENV_DIR/LOCALURL" ]; then
  LOCALURL=`cat $ENV_DIR/LOCALURL`
  status "Extracting prebuilt dependencies from $LOCALURL"
  mkdir -p local
  curl -sL $LOCALURL | tar -xz -C local 2>&1 | indent
fi

status "Bootstrapping cpanm and local::lib"
curl -sL $CPANM_URL | perl - --local-lib local App::cpanminus local::lib 2>&1 | indent
eval $(perl -Ilocal/lib/perl5 -Mlocal::lib=local 2> /dev/null)

if [ -e cpanfile.snapshot ]; then
  if ! command -v carton >/dev/null 2>&1; then
    status "Installing carton"
    perl -S cpanm Carton 2>&1 | indent
  fi
  status "Installing dependencies (carton)"
  perl -S carton install --deployment --cached 2>&1 | indent
  rm -rf vendor/cache 2>&1
fi

status "Installing dependencies (cpanm)"
perl -S cpanm --installdeps . 2>&1 | indent

status "Installing Starman"
perl -S cpanm Starman 2>&1 | indent

source $BP_DIR/bin/steps/hooks/post_compile $ENV_DIR

rm -rf $CACHE_DIR/perl
mkdir -p $CACHE_DIR/perl
if [ -d "local" ]; then
  status "Caching local directory for future builds"
  cp -R local $CACHE_DIR/perl/
fi
echo $CURRENT_PERL_VERSION >$CACHE_DIR/perl/.perl-version
